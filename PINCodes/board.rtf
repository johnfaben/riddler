{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 Consolas;}
{\colortbl;\red255\green255\blue255;\red13\green0\blue129;\red235\green236\blue237;\red36\green38\blue41;
\red37\green127\blue159;\red104\green26\blue29;\red114\green121\blue129;\red43\green39\blue19;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl300\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 Tkinter\cf4 \strokec4  \cf2 \strokec2 as\cf4 \strokec4  tk\
\cf2 \strokec2 class\cf4 \strokec4  \cf5 \strokec5 GameBoard\cf4 \strokec4 (tk.\cf5 \strokec5 Frame\cf4 \strokec4 ):\
    \cf2 \strokec2 def\cf4 \strokec4  __init__(self, parent, rows=\cf6 \strokec6 8\cf4 \strokec4 , columns=\cf6 \strokec6 8\cf4 \strokec4 , size=\cf6 \strokec6 32\cf4 \strokec4 , color1=\cf6 \strokec6 "white"\cf4 \strokec4 , color2=\cf6 \strokec6 "blue"\cf4 \strokec4 ):\
        \cf6 \strokec6 '''size is the size of a square, in pixels'''\cf4 \strokec4 \
\
        self.rows = rows\
        self.columns = columns\
        self.size = size\
        self.color1 = color1\
        self.color2 = color2\
        self.pieces = \{\}\
\
        canvas_width = columns * size\
        canvas_height = rows * size\
\
        tk.\cf5 \strokec5 Frame\cf4 \strokec4 .__init__(self, parent)\
        self.canvas = tk.\cf5 \strokec5 Canvas\cf4 \strokec4 (self, borderwidth=\cf6 \strokec6 0\cf4 \strokec4 , highlightthickness=\cf6 \strokec6 0\cf4 \strokec4 ,\
                                width=canvas_width, height=canvas_height, background=\cf6 \strokec6 "bisque"\cf4 \strokec4 )\
        self.canvas.pack(side=\cf6 \strokec6 "top"\cf4 \strokec4 , fill=\cf6 \strokec6 "both"\cf4 \strokec4 , expand=\cf2 \strokec2 True\cf4 \strokec4 , padx=\cf6 \strokec6 2\cf4 \strokec4 , pady=\cf6 \strokec6 2\cf4 \strokec4 )\
\
        \cf7 \strokec7 # this binding will cause a refresh if the user interactively\cf4 \strokec4 \
        \cf7 \strokec7 # changes the window size\cf4 \strokec4 \
        self.canvas.bind(\cf6 \strokec6 "<Configure>"\cf4 \strokec4 , self.refresh)\
\
    \cf2 \strokec2 def\cf4 \strokec4  addpiece(self, name, image, row=\cf6 \strokec6 0\cf4 \strokec4 , column=\cf6 \strokec6 0\cf4 \strokec4 ):\
        \cf6 \strokec6 '''Add a piece to the playing board'''\cf4 \strokec4 \
        self.canvas.create_image(\cf6 \strokec6 0\cf4 \strokec4 ,\cf6 \strokec6 0\cf4 \strokec4 , image=image, tags=(name, \cf6 \strokec6 "piece"\cf4 \strokec4 ), anchor=\cf6 \strokec6 "c"\cf4 \strokec4 )\
        self.placepiece(name, row, column)\
\
    \cf2 \strokec2 def\cf4 \strokec4  placepiece(self, name, row, column):\
        \cf6 \strokec6 '''Place a piece at the given row/column'''\cf4 \strokec4 \
        self.pieces[name] = (row, column)\
        x0 = (column * self.size) + int(self.size/\cf6 \strokec6 2\cf4 \strokec4 )\
        y0 = (row * self.size) + int(self.size/\cf6 \strokec6 2\cf4 \strokec4 )\
        self.canvas.coords(name, x0, y0)\
\
    \cf2 \strokec2 def\cf4 \strokec4  refresh(self, event):\
        \cf6 \strokec6 '''Redraw the board, possibly in response to window being resized'''\cf4 \strokec4 \
        xsize = int((event.width-\cf6 \strokec6 1\cf4 \strokec4 ) / self.columns)\
        ysize = int((event.height-\cf6 \strokec6 1\cf4 \strokec4 ) / self.rows)\
        self.size = min(xsize, ysize)\
        self.canvas.delete(\cf6 \strokec6 "square"\cf4 \strokec4 )\
        color = self.color2\
        \cf2 \strokec2 for\cf4 \strokec4  row \cf2 \strokec2 in\cf4 \strokec4  range(self.rows):\
            color = self.color1 \cf2 \strokec2 if\cf4 \strokec4  color == self.color2 \cf2 \strokec2 else\cf4 \strokec4  self.color2\
            \cf2 \strokec2 for\cf4 \strokec4  col \cf2 \strokec2 in\cf4 \strokec4  range(self.columns):\
                x1 = (col * self.size)\
                y1 = (row * self.size)\
                x2 = x1 + self.size\
                y2 = y1 + self.size\
                self.canvas.create_rectangle(x1, y1, x2, y2, outline=\cf6 \strokec6 "black"\cf4 \strokec4 , fill=color, tags=\cf6 \strokec6 "square"\cf4 \strokec4 )\
                color = self.color1 \cf2 \strokec2 if\cf4 \strokec4  color == self.color2 \cf2 \strokec2 else\cf4 \strokec4  self.color2\
        \cf2 \strokec2 for\cf4 \strokec4  name \cf2 \strokec2 in\cf4 \strokec4  self.pieces:\
            self.placepiece(name, self.pieces[name][\cf6 \strokec6 0\cf4 \strokec4 ], self.pieces[name][\cf6 \strokec6 1\cf4 \strokec4 ])\
        self.canvas.tag_raise(\cf6 \strokec6 "piece"\cf4 \strokec4 )\
        self.canvas.tag_lower(\cf6 \strokec6 "square"\cf4 \strokec4 )\cf8 \strokec8 \
}
